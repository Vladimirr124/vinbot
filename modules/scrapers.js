const puppeteer = require('puppeteer');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const path = require('path');
const { default: PQueue } = require('p-queue');
const { backupSites, SCREENSHOT_FOLDER } = require('./config');
const { analyzeScreenshotsWithGPT } = require('./openai');
const sharp = require('sharp');

const queue = new PQueue({ concurrency: 3 });

async function searchOnBidCars(query, isLot = false) {
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const url = isLot 
        ? `https://bid.cars/ru/lot/${query}`
        : `https://bid.cars/ru/search/results?search-type=typing&query=${query}`;
    
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã bid.cars...', url);
    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0');
    
    try {
        await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π –¥–ª—è –ª–æ—Ç–æ–≤
        if (isLot) {
            const currentUrl = page.url();
            if (currentUrl.includes('/error') || currentUrl.includes('/404')) {
                console.log('–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏)');
                await browser.close();
                return { result: null, url, screenshotPaths: [], captchaDetected: false };
            }
        }

        const pageContent = await page.content();
        if (pageContent.includes('Checking your browser') || pageContent.includes('cf-challenge') || pageContent.toLowerCase().includes('captcha')) {
            console.warn('üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Cloudflare-–∫–∞–ø—á–∞!');
            await browser.close();
            return { result: null, url, screenshotPaths: [], captchaDetected: true };
        }

        await page.waitForFunction(() => {
            const loader = document.querySelector('.loader');
            return !loader || loader.offsetParent === null;
        }, { timeout: 30000 });
    } catch (e) {
        console.warn('‚ö†Ô∏è –õ–æ–∞–¥–µ—Ä –Ω–µ –∏—Å—á–µ–∑ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.', e.message);
    }

    // --- –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–≤—É—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ---
    const screenshotPaths = [];
    const fs = require('fs');
    // 1. –°–∫—Ä–∏–Ω—à–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (top)
    const fullScreenshotFile = `screenshot_${query}_${Date.now()}_full.png`;
    const fullScreenshotPath = path.join(SCREENSHOT_FOLDER, fullScreenshotFile);
    await page.screenshot({ path: fullScreenshotPath, fullPage: true });
    const image = sharp(fullScreenshotPath);
    const metadata = await image.metadata();
    if (metadata.width && metadata.height && metadata.height >= 3) {
        const fortyPercentHeight = Math.floor(metadata.height * 0.36);
        const topFile = `screenshot_${query}_${Date.now()}_top.png`;
        const topPath = path.join(SCREENSHOT_FOLDER, topFile);
        await image.extract({ left: 0, top: 0, width: metadata.width, height: fortyPercentHeight })
            .sharpen(2, 1, 0.5)
            .normalize()
            .modulate({ brightness: 1.1, saturation: 1.1 })
            .toFile(topPath);
        screenshotPaths.push(topPath);
        if (fs.existsSync(fullScreenshotPath)) fs.unlinkSync(fullScreenshotPath);
    } else {
        screenshotPaths.push(fullScreenshotPath);
    }

    // 2. –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ '–û –º–∞—à–∏–Ω–µ' –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
    let aboutTabFound = false;
    try {
        await new Promise(res => setTimeout(res, 500));
        aboutTabFound = await page.evaluate(() => {
            const tabs = Array.from(document.querySelectorAll('button, a, [role=tab], .tab'));
            const aboutTexts = ['–û –º–∞—à–∏–Ω–µ'];
            for (const tab of tabs) {
                const text = (tab.innerText || tab.textContent || '').trim();
                if (aboutTexts.includes(text)) {
                    tab.click();
                    return true;
                }
            }
            return false;
        });
        if (aboutTabFound) {
            await page.waitForFunction(() => {
                return document.querySelector('.lot-info, .lot-details, .car-info, .lot-params, .lot-params__list');
            }, { timeout: 3000 });
            await new Promise(res => setTimeout(res, 400));
            // –°–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ '–û –º–∞—à–∏–Ω–µ' (full)
            const aboutFile = `screenshot_${query}_${Date.now()}_about_full.png`;
            const aboutPath = path.join(SCREENSHOT_FOLDER, aboutFile);
            await page.screenshot({ path: aboutPath, fullPage: true });
            // –û–±—Ä–µ–∑–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ top
            const aboutImage = sharp(aboutPath);
            const aboutMeta = await aboutImage.metadata();
            if (aboutMeta.width && aboutMeta.height && aboutMeta.height >= 3) {
                const aboutHeight = Math.floor(aboutMeta.height * 0.36);
                const aboutCropFile = `screenshot_${query}_${Date.now()}_about.png`;
                const aboutCropPath = path.join(SCREENSHOT_FOLDER, aboutCropFile);
                await aboutImage.extract({ left: 0, top: 0, width: aboutMeta.width, height: aboutHeight })
                    .sharpen(2, 1, 0.5)
                    .normalize()
                    .modulate({ brightness: 1.1, saturation: 1.1 })
                    .toFile(aboutCropPath);
                screenshotPaths.push(aboutCropPath);
                if (fs.existsSync(aboutPath)) fs.unlinkSync(aboutPath);
            } else {
                screenshotPaths.push(aboutPath);
            }
        }
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –≤–∫–ª–∞–¥–∫–µ –û –º–∞—à–∏–Ω–µ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω:', e.message);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–≤–µ—Ä—Ö)
    let result = null;
    if (screenshotPaths.length > 0) {
        result = await analyzeScreenshotsWithGPT(screenshotPaths, false);
    }
    const currentUrl = page.url();
    await browser.close();

    return { result, url: currentUrl, screenshotPaths, captchaDetected: false };
}

async function searchOnBackupSites(vin) {
  const results = [];
  const vinRegex = new RegExp(vin, 'i');
  const carKeywords = [
    'make', 'model', 'year', 'mileage', 'odometer', 'price', 'auction', 'vehicle', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—Ä–∫–∞', '–º–æ–¥–µ–ª—å', '–≥–æ–¥', '–ø—Ä–æ–±–µ–≥', '—Ü–µ–Ω–∞','sales',
    'photo', 'history', 'lot', 'Lot', 'iaai', 'copart', 'report', '—Å—Ç–∞—Ç—É—Å', '–ø—Ä–æ–¥–∞–Ω', '–∞—É–∫—Ü–∏–æ–Ω', '–ª–æ—Ç', '–∏—Å—Ç–æ—Ä–∏—è', '—Ñ–æ—Ç–æ', 'vin', '–Ω–æ–º–µ—Ä', 'engine', 'fuel', 'drive line', 'transmission', 'retail value', 'repairable', 'damage', 'keys', 'automatic', 'front', 'four wheel drive', 'without keys', 'sale', 'salvage', 'qc', 'value', 'open photo', 'technical specs', 'odometer', 'mi', 'other', 'automatic', 'repairable (qc)'
  ];
  const moreKeywords = [
    'photo', 'history', 'lot', 'auction', 'iaai', 'copart', 'vehicle', 'report',
    '—Å—Ç–∞—Ç—É—Å', '–ø—Ä–æ–¥–∞–Ω', '–∞—É–∫—Ü–∏–æ–Ω', '–ª–æ—Ç', '–∏—Å—Ç–æ—Ä–∏—è', '—Ñ–æ—Ç–æ', 'vin', '–Ω–æ–º–µ—Ä', '–ø—Ä–æ–±–µ–≥', '–≥–æ–¥', '–º–∞—Ä–∫–∞', '–º–æ–¥–µ–ª—å'
  ];

  const tasks = backupSites.map(site => async () => {
    const link = site.includes('carcheck.by') ? `${site}${vin}` : `${site}${vin}`;
    let text = null;
    let fetchFailed = false;
    try {
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞: ${link}`);
      const res = await fetch(link, {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'
        }
      });
      if (res.status !== 200) {
        console.log(`–°–∞–π—Ç ${link} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${res.status} (fetch)`);
        fetchFailed = true;
      } else {
        text = await res.text();
      }
    } catch (err) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch —Å–∞–π—Ç–∞ ${link}: ${err.message}`);
      fetchFailed = true;
    }

    // –ï—Å–ª–∏ fetch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º puppeteer
    if (fetchFailed || !text) {
      try {
        const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36');
        await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 20000 });
        await new Promise(res => setTimeout(res, 2000)); // –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        text = await page.content();
        await browser.close();
      } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ puppeteer —Å–∞–π—Ç–∞ ${link}: ${err.message}`);
        text = null;
      }
    }

    if (!text) {
      console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π—Ç–∞: ${link}`);
      return;
    }

    console.log('–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:', text.slice(0, 500));

    const hasVin = vinRegex.test(text);
    console.log('VIN –Ω–∞–π–¥–µ–Ω?', hasVin);
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω–æ–π, –µ—Å–ª–∏:
    // 1) –ï—Å—Ç—å VIN
    // 2) –ò (—Ö–æ—Ç—è –±—ã 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ carKeywords –ò–õ–ò —Ö–æ—Ç—è –±—ã 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ moreKeywords –ò–õ–ò –µ—Å—Ç—å <img>)
    const hasEnoughInfo = carKeywords.filter(keyword =>
      text.toLowerCase().includes(keyword)
    ).length >= 1;
    const hasMoreInfo = moreKeywords.filter(keyword =>
      text.toLowerCase().includes(keyword)
    ).length >= 1;
    const hasImg = /<img[^>]+src=/.test(text);
    console.log('–ï—Å—Ç—å <img>?', hasImg);
    const hasTable = /<table[^>]*>/.test(text);

    const error404Patterns = [
      '404', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'not found', 'does not exist', 'could not be found',
      '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'page not found', 'oops', '–æ—à–∏–±–∫–∞',
      '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ', '–≤—ã —á–µ–ª–æ–≤–µ–∫', 'captcha', 'please verify', 'i am not a robot', 'are you human',
      '–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–ª–æ–≤–µ–∫ –ª–∏ –≤—ã', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'checking your browser', '–∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞', 'security check'
    ];
    const is404 = error404Patterns.some(pattern => text.toLowerCase().includes(pattern));

    // --- –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º ---
    const negativePatterns = [
      'no data found', 'no information', '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç', 'no records', 'no results',
      'we could not find', 'no vehicles found', 'no auction history', 'no such vin',
      'not available', '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 'no matching records', 'no matching vehicles',
      'no matching lots', 'no matching cars', 'no matching auction', 'no matching history'
    ];
    const isNegative = negativePatterns.some(pattern => text.toLowerCase().includes(pattern));

    if (is404 || isNegative) {
      const matchedPattern = (is404 ? error404Patterns : negativePatterns).find(pattern => text.toLowerCase().includes(pattern));
      console.log(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—à–∏–±–∫–∏/–∫–∞–ø—á–∏/404/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö: ${link} (–ø–∞—Ç—Ç–µ—Ä–Ω: ${matchedPattern})`);
      return;
    }

    if (
      hasVin &&
      hasTable
    ) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ: ${link}`);
      console.log('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', carKeywords.filter(keyword => text.toLowerCase().includes(keyword)));
      console.log('MoreKeywords:', moreKeywords.filter(keyword => text.toLowerCase().includes(keyword)));
      results.push(link);
    } else {
      console.log(`üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞: ${link}`);
    }
  });

  await queue.addAll(tasks);
  return results;
}

module.exports = { searchOnBidCars, searchOnBackupSites }; 