const { Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { freeLimit, ADMIN_CHAT_ID, SCREENSHOT_FOLDER } = require('./config');
const { userData, userLogs, initUser, isSubscribed, addSubscription, setUserLanguage } = require('./state');
const { formatDate, getUserLanguage, preprocessImage } = require('./utils');
const { recognizeVinWithGoogleVision } = require('./vision');
const { analyzeScreenshotWithGPT, translateTextWithGPT } = require('./openai');
const { searchOnBidCars, searchOnBackupSites } = require('./scrapers');

async function processVIN(ctx, vin, options = {}) {
    const userId = ctx.chat.id;
    const lang = getUserLanguage(ctx);
    const user = userData.get(userId);

    if (user.cancelSearch) {
        user.cancelSearch = false;
        return;
    }

    await ctx.reply(lang === 'en' ? 'üîç Searching...' : 'üîç –ò—â—É...');

    const { result, url, screenshotPaths, captchaDetected } = await searchOnBidCars(vin);

    let gptResults = [];
    for (let i = 0; i < 2; ++i) {
        if (screenshotPaths && screenshotPaths[i] && fs.existsSync(screenshotPaths[i])) {
            let gptResult = await analyzeScreenshotWithGPT(screenshotPaths[i], false, null, 'ru');
            if (lang === 'en' && gptResult) {
                gptResult = await translateTextWithGPT(gptResult, 'en');
            }
            if (lang === 'ru' && gptResult) {
                gptResult = manualTranslateToRussian(gptResult);
            }
            gptResults.push({ path: screenshotPaths[i], result: gptResult });
        }
    }

    let foundOnMainSite = false;
    if (captchaDetected) {
        await ctx.reply(lang === 'en' ? 'ü§ñ Site is protected by captcha.' : 'ü§ñ –°–∞–π—Ç –∑–∞—â–∏—â–µ–Ω –∫–∞–ø—á–µ–π.');
    } else if (
        gptResults.length > 0 &&
        gptResults.some(r => r.result && !r.result.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') && !r.result.toLowerCase().includes('not found') && !r.result.toLowerCase().includes('nothing was found') && !r.result.toLowerCase().includes('nothing'))
    ) {
        foundOnMainSite = true;
        userLogs.get(userId).successful += 1;

        const foundMessage = lang === 'en'  
            ? 'Found sold on sites:'
            : '–ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥–∞–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–∞—Ö:';

        let finalUrl = url;
        if (lang === 'en' && typeof finalUrl === 'string' && finalUrl.includes('bid.cars/ru/')) {
            finalUrl = finalUrl.replace('bid.cars/ru/', 'bid.cars/en/');
        }
        const linksMessage = `${foundMessage}\n${finalUrl}`;
        await ctx.reply(linksMessage);

        if (gptResults.length === 2) {
            const mergePrompt =
                '–í–æ—Ç –¥–≤–µ —á–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ —Å —Å–∞–π—Ç–∞ bid.cars. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏ –æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–ª–æ–∫. –ù–µ –¥—É–±–ª–∏—Ä—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö.\n\n--- –ß–∞—Å—Ç—å 1 (–∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ—Ç–∞) ---\n' +
                (gptResults[0].result || '') + '\n\n--- –ß–∞—Å—Ç—å 2 (–û –º–∞—à–∏–Ω–µ) ---\n' +
                (gptResults[1].result || '');
            let mergedText = await analyzeScreenshotWithGPT(null, false, mergePrompt, 'ru');
            if (lang === 'en' && mergedText) {
                mergedText = await translateTextWithGPT(mergedText, 'en');
            }
            if (lang === 'ru' && mergedText) {
                mergedText = manualTranslateToRussian(mergedText);
            }
            const media = [
                {
                    type: 'photo',
                    media: { source: gptResults[0].path },
                    caption: mergedText || '',
                    parse_mode: 'HTML'
                },
                {
                    type: 'photo',
                    media: { source: gptResults[1].path }
                }
            ];
            await ctx.replyWithMediaGroup(media);
        } else {
            for (const { path: imgPath, result: gptText } of gptResults) {
                if (fs.existsSync(imgPath)) {
                    await ctx.replyWithPhoto({ source: imgPath }, {
                        caption: gptText || (lang === 'en' ? 'No result' : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'),
                        parse_mode: 'HTML'
                    });
                }
            }
        }
    } else if (gptResults.length > 0) {
        for (const { result: gptText } of gptResults) {
            if (gptText && !gptText.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') && !gptText.toLowerCase().includes('not found')) {
                await ctx.reply(gptText, { parse_mode: 'HTML' });
            }
        }
    }

    if (!foundOnMainSite) {
        await ctx.reply(lang === 'en' ? 'üîç No info on bid.cars, searching other sites...' : 'üîç –ù–∞ bid.cars –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â—É –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–∞—Ö...');
        const backupResults = await searchOnBackupSites(vin);
        if (backupResults.length > 0) {
            userLogs.get(userId).successful += 1;
            await ctx.reply(
                (lang === 'en' ? '‚úÖ Found on other sites:\n' : '‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–∞—Ö:\n') + backupResults.join('\n')
            );
        } else {
            userLogs.get(userId).failed += 1;
            await ctx.reply(lang === 'en' ? '‚ùå VIN not found anywhere.' : '‚ùå VIN –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }

    if (screenshotPaths && screenshotPaths.length > 0) {
        for (const p of screenshotPaths) {
            if (fs.existsSync(p)) fs.unlinkSync(p);
        }
    }
    await ctx.reply(
        lang === 'en'
            ? `Send a photo of the VIN code. Also, VIN or lot number, separately or in a message.`
            : `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω-–∫–æ–¥–∞. –¢–∞–∫–∂–µ –ø–æ–¥–æ–π–¥—É—Ç VIN –∏–ª–∏ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.`
    );
    // userData.set(userId, user);
}

async function processLot(ctx, lotNumber) {
    const userId = ctx.chat.id;
    const lang = getUserLanguage(ctx);
    const user = userData.get(userId);

    if (user.cancelSearch) {
        user.cancelSearch = false;
        return;
    }

    await ctx.reply(`üîç ${lang === 'en' ? 'Searching...' : '–ò—â—É...'}`);

    const { result, url, screenshotPaths, captchaDetected } = await searchOnBidCars(lotNumber, true);

    let gptResults = [];
    for (let i = 0; i < 2; ++i) {
        if (screenshotPaths && screenshotPaths[i] && fs.existsSync(screenshotPaths[i])) {
            let gptResult = await analyzeScreenshotWithGPT(screenshotPaths[i], false, null, 'ru');
            if (lang === 'en' && gptResult) {
                gptResult = await translateTextWithGPT(gptResult, 'en');
            }
            if (lang === 'ru' && gptResult) {
                gptResult = manualTranslateToRussian(gptResult);
            }
            gptResults.push({ path: screenshotPaths[i], result: gptResult });
        }
    }

    let foundOnMainSite = false;
    if (captchaDetected) {
        await ctx.reply(lang === 'en' ? 'ü§ñ Site is protected by captcha.' : 'ü§ñ –°–∞–π—Ç –∑–∞—â–∏—â–µ–Ω –∫–∞–ø—á–µ–π.');
    } else if (
        gptResults.length > 0 &&
        gptResults.some(r => r.result && !r.result.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') && !r.result.toLowerCase().includes('not found') && !r.result.toLowerCase().includes('nothing was found'))
    ) {
        foundOnMainSite = true;
        userLogs.get(userId).successful += 1;

        const foundMessage = lang === 'en'
            ? 'Found sold on sites:'
            : '–ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥–∞–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–∞—Ö:';

        let finalUrl = url;
        if (lang === 'en' && typeof finalUrl === 'string' && finalUrl.includes('bid.cars/ru/')) {
            finalUrl = finalUrl.replace('bid.cars/ru/', 'bid.cars/en/');
        }
        const linksMessage = `${foundMessage}\n${finalUrl}`;
        await ctx.reply(linksMessage);

        if (gptResults.length === 2) {
            const mergePrompt =
                '–í–æ—Ç –¥–≤–µ —á–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ —Å —Å–∞–π—Ç–∞ bid.cars. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏ –æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–ª–æ–∫. –ù–µ –¥—É–±–ª–∏—Ä—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö.\n\n--- –ß–∞—Å—Ç—å 1 (–∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ—Ç–∞) ---\n' +
                (gptResults[0].result || '') + '\n\n--- –ß–∞—Å—Ç—å 2 (–û –º–∞—à–∏–Ω–µ) ---\n' +
                (gptResults[1].result || '');
            let mergedText = await analyzeScreenshotWithGPT(null, false, mergePrompt, 'ru');
            if (lang === 'en' && mergedText) {
                mergedText = await translateTextWithGPT(mergedText, 'en');
            }
            if (lang === 'ru' && mergedText) {
                mergedText = manualTranslateToRussian(mergedText);
            }
            const media = [
                {
                    type: 'photo',
                    media: { source: gptResults[0].path },
                    caption: mergedText || '',
                    parse_mode: 'HTML'
                },
                {
                    type: 'photo',
                    media: { source: gptResults[1].path }
                }
            ];
            await ctx.replyWithMediaGroup(media);
        } else {
            for (const { path: imgPath, result: gptText } of gptResults) {
                if (fs.existsSync(imgPath)) {
                    await ctx.replyWithPhoto({ source: imgPath }, {
                        caption: gptText || (lang === 'en' ? 'No result' : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'),
                        parse_mode: 'HTML'
                    });
                }
            }
        }
        
    } else {
        userLogs.get(userId).failed += 1;
        await ctx.reply(lang === 'en' ? '‚ùå Lot not found.' : '‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    if (screenshotPaths && screenshotPaths.length > 0) {
        for (const p of screenshotPaths) {
            if (fs.existsSync(p)) fs.unlinkSync(p);
        }
    }

    await ctx.reply(
        lang === 'en'
            ? `Send a photo of the VIN code. Also, VIN or lot number, separately or in a message.`
            : `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω-–∫–æ–¥–∞. –¢–∞–∫–∂–µ –ø–æ–¥–æ–π–¥—É—Ç VIN –∏–ª–∏ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.`
    );
    // userData.set(userId, user);
}

function registerHandlers(bot) {
    bot.command('admin', async (ctx) => {
        console.log('–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin', ctx.chat.id);
        const lang = getUserLanguage(ctx);
        if (ctx.chat.id.toString() !== ADMIN_CHAT_ID) {
            return ctx.reply(lang === 'en' ? '‚ùå Access denied.' : '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        }

        await ctx.reply((lang === 'en' ? 'Your chat.id: ' : '–í–∞—à chat.id: ') + ctx.chat.id);

        const totalUsers = userData.size;
        const totalChecks = [...userData.values()].reduce((sum, u) => sum + u.checks, 0);
        const avgChecks = totalUsers ? (totalChecks / totalUsers).toFixed(2) : 0;
        const totalSubscribers = [...userData.values()].filter(u => isSubscribed(u.subscription)).length;
        
        let stats;
        if (lang === 'en') {
            stats = `üìä **Admin Panel**\n\n`;
            stats += `üë• Users: ${totalUsers}\n`;
            stats += `üìà Average checks: ${avgChecks}\n`;
            stats += `üí≥ Subscribers: ${totalSubscribers}\n\n`;
            stats += `üìã **User Logs:**\n`;
        } else {
            stats = `üìä **–ê–¥–º–∏–Ω–∫–∞**\n\n`;
            stats += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
            stats += `üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${avgChecks}\n`;
            stats += `üí≥ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${totalSubscribers}\n\n`;
            stats += `üìã **–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n`;
        }

        if (userLogs.size === 0) {
            stats += lang === 'en' ? 'No data.' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.';
        } else {
            for (const [userId, log] of userLogs.entries()) {
                const user = userData.get(userId);
                const subStatus = isSubscribed(userId)
                    ? (lang === 'en' ? `active until ${formatDate(user.subscription)}` : `–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.subscription)}`)
                    : (lang === 'en' ? 'none' : '–Ω–µ—Ç');
                stats += `\n**ID:** \`${userId}\`\n`;
                stats += `  - ${lang === 'en' ? 'Successful' : '–£—Å–ø–µ—à–Ω–æ'}: ${log.successful}\n`;
                stats += `  - ${lang === 'en' ? 'Failed' : '–ù–µ—É—Å–ø–µ—à–Ω–æ'}: ${log.failed}\n`;
                stats += `  - ${lang === 'en' ? 'Subscription' : '–ü–æ–¥–ø–∏—Å–∫–∞'}: ${subStatus}\n`;
            }
        }
        
        await ctx.replyWithHTML(stats);
    });
    
    bot.start(async (ctx) => {
        const userId = ctx.chat.id;
        initUser(userId);
        const user = userData.get(userId);
        user.cancelSearch = false;
        user.canUndo = false;

        // –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        return ctx.reply(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select language:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'language_ru'), Markup.button.callback('üá¨üáß English', 'language_en')]
            ])
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    bot.action('language_ru', async (ctx) => {
        const userId = ctx.chat.id;
        initUser(userId);
        setUserLanguage(userId, 'ru');
        await ctx.answerCbQuery('–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: –†—É—Å—Å–∫–∏–π');
        
        await ctx.editMessageText(
            `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é VIN-–∫–æ–¥, –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞—Ö Copart –∏ IAAI.\n\n–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å @bolbat86`
        );
        
        const user = userData.get(userId);
        await ctx.reply(
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω-–∫–æ–¥–∞. –¢–∞–∫–∂–µ –ø–æ–¥–æ–π–¥—É—Ç VIN –∏–ª–∏ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.`,
            // Markup.inlineKeyboard([
            //     [Markup.button.callback('üöÄ –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç', 'subscribe')]
            // ]),
            { parse_mode: 'HTML' }
        );
    });

    bot.action('language_en', async (ctx) => {
        const userId = ctx.chat.id;
        initUser(userId);
        setUserLanguage(userId, 'en');
        await ctx.answerCbQuery('Language selected: English');

        await ctx.editMessageText(
            `Hi! I am a bot that recognizes VIN codes from photos and shows if the car was sold at Copart or IAAI auctions.\n\nFeedback: @bolbat86`
        );

        const user = userData.get(userId);
        await ctx.reply(
            `Send a photo, VIN code, or lot number as text.`,
            // Markup.inlineKeyboard([
            //     [Markup.button.callback('üöÄ Get Unlimited', 'subscribe')]
            // ]),
            { parse_mode: 'HTML' }
        );
    });

    bot.on('photo', async (ctx) => {
        const userId = ctx.chat.id;
        const lang = getUserLanguage(ctx);
        initUser(userId);
        const user = userData.get(userId);
        user.cancelSearch = false;
        user.canUndo = false;
        // if (!isSubscribed(userId) && user.checks >= freeLimit) {
        //     return ctx.reply(
        //         lang === 'en' ? `You have used ${freeLimit} free checks.` : `–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${freeLimit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.`,
        //         Markup.inlineKeyboard([
        //             Markup.button.callback(lang === 'en' ? 'üöÄ Get Unlimited' : 'üöÄ –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç', 'subscribe')
        //         ])
        //     );
        // }

        const photo = ctx.message.photo.pop();
        const fileUrl = await ctx.telegram.getFileLink(photo.file_id);
        const filePath = path.join(SCREENSHOT_FOLDER, `vin_photo_${userId}_${Date.now()}.jpg`);
        let processedImagePath;
        let vin = null;
        try {
            const response = await fetch(fileUrl.href);
            const writer = fs.createWriteStream(filePath);
            response.body.pipe(writer);
            await new Promise((res, rej) => { writer.on('finish', res); writer.on('error', rej); });

            processedImagePath = await preprocessImage(filePath);
            vin = await recognizeVinWithGoogleVision(processedImagePath);
            if (!vin) {
                console.log('Google Vision –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–±—É—é OpenAI...');
                vin = await analyzeScreenshotWithGPT(processedImagePath, true);
            }
            if (vin && vin.toUpperCase().includes('–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù')) {
                vin = null;
            }

            if (vin) {
                await ctx.reply(
                    vin.toUpperCase(),
                    Markup.inlineKeyboard([
                        [
                            Markup.button.callback(lang === 'en' ? '‚úÖ Correct' : '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', `vin_ok_${vin}`),
                            Markup.button.callback(lang === 'en' ? '‚ùå Incorrect' : '‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–µ—Ä–Ω–æ', `vin_wrong_${vin}`)
                        ]
                    ])
                );
            } else {
                userLogs.get(userId).failed += 1;
                await ctx.reply(getUserLanguage(ctx) === 'en' ? '‚ùå VIN not recognized.' : '‚ùå VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.');
            }
        } catch (err) {
            console.error('‚ùå Photo processing error:', err);
            userLogs.get(userId).failed += 1;
            await ctx.reply('‚ùå Error processing photo.');
        } finally {
            if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
            if (processedImagePath && fs.existsSync(processedImagePath)) fs.unlinkSync(processedImagePath);
        }
    });

    bot.on('text', async (ctx) => {
        const originalText = ctx.message.text.trim();
        const upperCaseText = originalText.toUpperCase();
        const lang = getUserLanguage(ctx);

        // –ò—â–µ–º –≤—Å–µ VIN –∏ –≤—Å–µ –ª–æ—Ç—ã (VIN: 17 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥, –ª–æ—Ç: 8 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ –∏–ª–∏ 0-/1- –∏ 8 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥)
        const vinRegex = /\b[A-Z0-9]{17}\b/g;
        const lotWithDashRegex = /\b[0-1]-\d{8}\b/g;
        const lotDigitsOnlyRegex = /\b\d{8}\b/g;

        const vins = upperCaseText.match(vinRegex) || [];
        const lotsWithDash = upperCaseText.match(lotWithDashRegex) || [];
        const lotsDigitsOnly = upperCaseText.match(lotDigitsOnlyRegex) || [];

        // –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ø–∞–ª–∏ –≤ lotsWithDash (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-12345678)
        const lotsDigitsOnlyFiltered = lotsDigitsOnly.filter(lot => !lotsWithDash.some(ld => ld.endsWith(lot)));

        let lotVariants = [];
        if (lotsWithDash.length > 0) {
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ª–æ—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 0- –∏–ª–∏ 1-, —Ç–æ —Ç–æ–ª—å–∫–æ –æ–Ω (–∏ VIN –µ—Å–ª–∏ –µ—Å—Ç—å)
            lotVariants = [...new Set(lotsWithDash)];
        } else if (lotsDigitsOnlyFiltered.length > 0) {
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 8 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥, —Ç–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: 0-–Ω–æ–º–µ—Ä –∏ 1-–Ω–æ–º–µ—Ä
            for (const lot of lotsDigitsOnlyFiltered) {
                lotVariants.push(`0-${lot}`);
                lotVariants.push(`1-${lot}`);
            }
            lotVariants = [...new Set(lotVariants)];
        }
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (VIN + –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ—Ç–æ–≤)
        const found = [...new Set([...vins, ...lotVariants])];

        if (found.length === 0) {
            await ctx.reply(
                lang === 'en'
                    ? '‚ùå Please enter either:\n- VIN (17 characters, letters and numbers)\n- Lot number (e.g., 68723752)'
                    : '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n- VIN (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã)\n- –ù–æ–º–µ—Ä –ª–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 68723752)'
            );
            return;
        }

        if (found.length === 1) {
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∏—â–µ–º —Å—Ä–∞–∑—É
            const value = found[0];
            await ctx.reply(value);
            initUser(ctx.chat.id);
            if (/^[A-Z0-9]{17}$/.test(value)) {
                await sendVinLinks(ctx, value);
                await processVIN(ctx, value, { fromPhoto: false });
            } else {
                // value –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∞ 0-XXXXXXXX –∏–ª–∏ 1-XXXXXXXX
                let lotNumberToProcess = value;
                let lotNumberForLinks = lotNumberToProcess.replace(/^[0-1]-/, '');
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º lotNumberForLinks (–±–µ–∑ X-)
                const statVinUrl = `https://stat.vin/cars/${lotNumberForLinks}`;
                const auctionHistoryUrl = `https://auctionhistory.io/item/${lotNumberForLinks}`;
                const carCheckVinUrl = `https://carcheckvin.com/automobile/${lotNumberForLinks}`;
                const googleLotUrl = `https://www.google.com/search?q=%22${lotNumberForLinks}%22`;
                const bidcarsUrl = `https://bid.cars/`;
                const hideAutoVinUrl = `https://hideautovin.com/`;
                const plcAuctionUrl = `https://plc.auction/`;
                const lotLinksMessage = lang === 'en'
                    ? `üîó <b>Quick links:</b>\n<a href="${googleLotUrl}">Google</a>\n\n<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n<b>üîóManual search:</b>\n<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`
                    : `üîó <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n<a href="${googleLotUrl}">Google</a>\n\n<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n<b>üîó–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä—É—á–Ω—É—é:</b>\n<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`;
                await ctx.replyWithHTML(lotLinksMessage);
                await processLot(ctx, lotNumberToProcess);
            }
            return;
        }

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        const buttons = found.map(val => Markup.button.callback(val, `search_choice_${val}`));
        await ctx.reply(
            lang === 'en'
                ? 'Multiple VINs or lot numbers found. Choose what to search:'
                : '–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ VIN –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –ª–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –∏—Å–∫–∞—Ç—å:',
            Markup.inlineKeyboard(buttons, { columns: 1 })
        );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    bot.action(/search_choice_(.+)/, async (ctx) => {
        const lang = getUserLanguage(ctx);
        const value = ctx.match[1];
        await ctx.answerCbQuery();
        await ctx.reply(value);
        initUser(ctx.chat.id);
        if (/^[A-Z0-9]{17}$/.test(value)) {
            await sendVinLinks(ctx, value);
            await processVIN(ctx, value, { fromPhoto: false });
        } else {
            // value –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∞ 0-XXXXXXXX –∏–ª–∏ 1-XXXXXXXX
            let lotNumberToProcess = value;
            let lotNumberForLinks = lotNumberToProcess.replace(/^[0-1]-/, '');
            const statVinUrl = `https://stat.vin/cars/${lotNumberForLinks}`;
            const auctionHistoryUrl = `https://auctionhistory.io/item/${lotNumberForLinks}`;
            const carCheckVinUrl = `https://carcheckvin.com/automobile/${lotNumberForLinks}`;
            const googleLotUrl = `https://www.google.com/search?q=%22${lotNumberForLinks}%22`;
            const bidcarsUrl = `https://bid.cars/`;
            const hideAutoVinUrl = `https://hideautovin.com/`;
            const plcAuctionUrl = `https://plc.auction/`;
            const lotLinksMessage = lang === 'en'
                ? `üîó <b>Quick links:</b>\n<a href="${googleLotUrl}">Google</a>\n\n<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n<b>üîóManual search:</b>\n<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`
                : `üîó <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n<a href="${googleLotUrl}">Google</a>\n\n<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n<b>üîó–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä—É—á–Ω—É—é:</b>\n<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`;
            await ctx.replyWithHTML(lotLinksMessage);
            await processLot(ctx, lotNumberToProcess);
        }
    });

    bot.action('subscribe', async (ctx) => {
        try {
            await ctx.answerCbQuery();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ answerCbQuery (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å):', error.message);
        }
        const lang = getUserLanguage(ctx);
        await ctx.reply(
            lang === 'en' ? 'Payment methods:' : '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:',
            Markup.inlineKeyboard([
                [Markup.button.callback(lang === 'en' ? 'üí∏ SBP' : 'üí∏ –°–ë–ü', 'pay_sbp'), Markup.button.callback(lang === 'en' ? 'üí≥ MIR Card' : 'üí≥ –ö–∞—Ä—Ç–∞ –ú–ò–†', 'pay_mir')],
                [Markup.button.callback('üí≥ Visa, Mastercard', 'pay_visa'), Markup.button.callback(lang === 'en' ? 'üåê Other (CloudPayments)' : 'üåê –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã', 'pay_cloud')]
            ])
        );
    });

    bot.action(['pay_sbp', 'pay_mir', 'pay_visa', 'pay_cloud'], async (ctx) => {
        try {
            await ctx.answerCbQuery();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ answerCbQuery (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å):', error.message);
        }
        const lang = getUserLanguage(ctx);
        const amount = '1000 RUB';

        await ctx.reply(
            lang === 'en' ? `6-month plan: ${amount}` : `–¢–∞—Ä–∏—Ñ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${amount}`,
            Markup.inlineKeyboard([
                Markup.button.callback(lang === 'en' ? 'üí≥ Pay' : 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', 'process_payment')
            ])
        );
    });
    
    bot.action('process_payment', async (ctx) => {
        try {
            await ctx.answerCbQuery();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ answerCbQuery (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å):', error.message);
        }
        const userId = ctx.chat.id;
        const lang = getUserLanguage(ctx);

        const paymentSuccess = Math.random() > 0.3;

        if (paymentSuccess) {
            addSubscription(userId);
            await ctx.reply(
                lang === 'en'
                    ? `‚úÖ Success! Plan active until ${formatDate(userData.get(userId).subscription)}`
                    : `‚úÖ –£—Å–ø–µ—à–Ω–æ! –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${formatDate(userData.get(userId).subscription)}`
            );
        } else {
            await ctx.reply(
                lang === 'en' ? '‚ùå Payment failed.' : '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª.',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üí∏ SBP', 'pay_sbp'), Markup.button.callback('üí≥ MIR Card', 'pay_mir')],
                    [Markup.button.callback('üí≥ Visa, Mastercard', 'pay_visa'), Markup.button.callback('üåê Other (CloudPayments)', 'pay_cloud')]
                ])
            );
        }
    });

    bot.action(/vin_ok_(.+)/, async (ctx) => {
        const lang = getUserLanguage(ctx);
        try {
            await ctx.answerCbQuery(lang === 'en' ? 'VIN confirmed!' : 'VIN –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ answerCbQuery (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å):', error.message);
        }
        const userId = ctx.chat.id;
        initUser(userId);
        const user = userData.get(userId);
        const vin = ctx.match[1];
        
        await sendVinLinks(ctx, vin);
        
        await processVIN(ctx, vin, { fromPhoto: true });
    });

    bot.action(/vin_wrong_(.+)/, async (ctx) => {
        const lang = getUserLanguage(ctx);
        try {
            await ctx.answerCbQuery(lang === 'en' ? 'Please try again!' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!');
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ answerCbQuery (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å):', error.message);
        }
        const userId = ctx.chat.id;
        initUser(userId);
        const user = userData.get(userId);
        // await ctx.reply(
        //     lang === 'en'
        //         ? `You have used ${user.checks} of ${freeLimit} free recognitions.\n\nSend a photo of the VIN code ‚Ä¢ I will also find the VIN or lot # in a text message.`
        //         : `–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${user.checks} –∏–∑ ${freeLimit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∏–Ω-–∫–æ–¥–∞ ‚Ä¢ —Ç–∞–∫–∂–µ –Ω–∞–π–¥—É VIN –∏–ª–∏ # –ª–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`,
        //     { parse_mode: 'HTML' }
        // );
    });


    bot.command('grant_unlimited', async (ctx) => {
        const lang = getUserLanguage(ctx);
        if (ctx.chat.id.toString() !== ADMIN_CHAT_ID) {
            return ctx.reply(lang === 'en' ? '‚ùå Access denied.' : '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
        }

        const targetUserId = ctx.message.text.split(' ')[1];
        if (!targetUserId) {
            return ctx.reply(lang === 'en' ? '‚ùå Specify user ID: /grant_unlimited <user_id>' : '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant_unlimited <user_id>');
        }

        initUser(targetUserId);
        addSubscription(targetUserId);

        const user = userData.get(targetUserId);
        await ctx.reply(lang === 'en' ? `‚úÖ Unlimited access granted to user \`${targetUserId}\` until ${formatDate(user.subscription)}` : `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \`${targetUserId}\` –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑–ª–∏–º–∏—Ç –¥–æ ${formatDate(user.subscription)}`);
    });

    bot.on('message', async (ctx) => {
        const lang = getUserLanguage(ctx);
        await ctx.reply((lang === 'en' ? 'Message received! Type: ' : '–õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –¢–∏–ø: ') + ctx.updateType);
    });

    bot.catch((err, ctx) => {
        console.error(`‚ùå Error for ${ctx.updateType}:`, err);
    });
}

async function sendVinLinks(ctx, vin) {
    const lang = getUserLanguage(ctx);
    const googleUrl = `https://www.google.com/search?q=%22${vin}%22`;
    const statVinUrl = `https://stat.vin/cars/${vin}`;
    const auctionHistoryUrl = `https://auctionhistory.io/item/${vin}`;
    const carCheckVinUrl = `https://carcheckvin.com/automobile/${vin}`;
    const bidcarsUrl = `https://bid.cars/`;
    const hideAutoVinUrl = `https://hideautovin.com/`;
    const plcAuctionUrl = `https://plc.auction/`;
    
    let linksMessage;
    if (lang === 'en') {
        linksMessage =
            `üîó <b>Quick Links:</b>\n` +
            `<a href="${googleUrl}">Google</a>\n\n` +
            `<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n` +
            `üîó <b>Copy and search manually:</b>\n` +
            `<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`;
    } else {
        linksMessage =
            `üîó <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n` +
            `<a href="${googleUrl}">Google</a>\n\n` +
            `<a href="${statVinUrl}">Stat.vin</a> ‚Ä¢ <a href="${auctionHistoryUrl}">AuctionHistory</a> ‚Ä¢ <a href="${carCheckVinUrl}">CarCheckVin</a>\n\n` +
            `üîó <b>–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä—É—á–Ω—É—é:</b>\n` +
            `<a href="${bidcarsUrl}">Bid.cars</a> ‚Ä¢ <a href="${hideAutoVinUrl}">HideAutoVin</a> ‚Ä¢ <a href="${plcAuctionUrl}">PLC Auction</a>`;
    }
    await ctx.reply(linksMessage, { parse_mode: 'HTML' });
}

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function manualTranslateToRussian(text) {
    if (!text) return text;
    const dict = {
        'Final known bid': '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
        'Auction Fees': '–ê—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã',
        'Copart, sold on': 'Copart, –ø—Ä–æ–¥–∞–Ω',
        'Copart, sold': 'Copart, –ø—Ä–æ–¥–∞–Ω',
        'IAAI, sold on': 'IAAI, –ø—Ä–æ–¥–∞–Ω',
        'IAAI, sold': 'IAAI, –ø—Ä–æ–¥–∞–Ω',
        'Seller': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
        'Sale doc': '–¢–∞–π—Ç–ª',
        'Loss': '–¢–∏–ø –ø–æ—Ç–µ—Ä–∏',
        'Primary damage': '–ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ',
        'Secondary damage': '–í—Ç–æ—Ä–∏—á–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ',
        'Mileage': '–ü—Ä–æ–±–µ–≥',
        'Start code': '–ó–∞–ø—É—Å–∫',
        'Key': '–ö–ª—é—á',
        'Present': '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π',
        'ACV': 'ACV',
        'ERC': 'ERC',
        'Engine': '–î–≤–∏–≥–∞—Ç–µ–ª—å',
        'Location': '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        'Shipping from': '–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑',
        'Clear (Michigan)': '–ß–∏—Å—Ç—ã–π (–ú–∏—á–∏–≥–∞–Ω)',
        'Run and Drive': '–ù–∞ —Ö–æ–¥—É',
        'not found': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        'Bid:': '–°—Ç–∞–≤–∫–∞:',
        'Title:': '–¢–∞–π—Ç–ª:',
        'Port:': '–ü–æ—Ä—Ç:',
        'Sale history': '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂',
        'Title': '–¢–∞–π—Ç–ª',
        'sold June': '–ø—Ä–æ–¥–∞–Ω',
        'sold on': '–ø—Ä–æ–¥–∞–Ω',
        'Fees': '–°–±–æ—Ä—ã',
        'lot': '–ª–æ—Ç',
        'Lot:': '–õ–æ—Ç:',
        'mi (': '–º–∏–ª—å (',
        'km)': '–∫–º)',
        'Insurance Company': '–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        'Cert of title slvg rebuildable (FL)': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π (–§–ª–æ—Ä–∏–¥–∞)',
        'Clear': '–ß–∏—Å—Ç—ã–π',
        'Collision': '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ',
        'Front end': '–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å',
        'Left side': '–õ–µ–≤–∞—è —á–∞—Å—Ç—å',
        'unknown': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        'no data': '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
    };
    let result = text;
    for (const [en, ru] of Object.entries(dict)) {
        result = result.replace(new RegExp(escapeRegExp(en), 'gi'), ru);
    }
    return result;
}

module.exports = { registerHandlers };