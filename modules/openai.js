const { OpenAI } = require('openai');
const fs = require('fs');
const mime = require('mime-types');
const { OPENAI_API_KEY } = require('./config');

const openai = new OpenAI({ apiKey: OPENAI_API_KEY, timeout: 120000 });

async function analyzeScreenshotsWithGPT(imagePaths, isVin = false, lang = 'ru') {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
        console.log('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –ø–æ —Ç–∞–π–º–∞—É—Ç—É...');
        controller.abort();
    }, 120000); // –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    try {
        if (!imagePaths || imagePaths.length === 0) {
            console.log('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
            return null;
        }

        console.log(`–ß—Ç–µ–Ω–∏–µ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è GPT...`);
        const userContent = [];

        for (const imagePath of imagePaths) {
            try {
                const buffer = fs.readFileSync(imagePath);
                const base64Image = buffer.toString('base64');
                const mimeType = mime.lookup(imagePath);
                userContent.push({
                    type: 'image_url',
                    image_url: { url: `data:${mimeType};base64,${base64Image}` },
                });
            } catch (readError) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imagePath}:`, readError.message);
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
            }
        }
        
        if (userContent.length === 0) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
            return null;
        }
        
        const systemPrompt = isVin
            ? (lang === 'en'
                ? 'You are an OCR interpreter. The image may contain a VIN code. Try to recognize the VIN code, even if it is partially readable or contains errors. If you cannot see the VIN, write "VIN not recognized". If you managed to find the VIN, reply with only the VIN code. If you could not recognize it, reply: "error".'
                : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂—ë–Ω VIN-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —á–∏—Ç–∞–µ–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ VIN –Ω–µ –≤–∏–¥–Ω–æ, –Ω–∞–ø–∏—à–∏ "VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω". –ï—Å–ª–∏ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º vin –∫–æ–¥. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —É–¥–∞–ª–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç : "error" ')
            : (lang === 'en'
                ? 'You are an OCR interpreter. The image should contain a car auction card from bid.cars (but if it is not there, or you see inscriptions like "not found" or "nothing was found", just reply: "not found"). Extract the lot data (mileage, bid amounts, make, model, year, VIN, lot number, final bid, auction fees, auction, sale date, seller, sale doc, loss, primary and secondary damage, start code, key, ACV, ERC, engine, location, port, sales history) and return in the following format (if some data is missing, that is fine, just write all available data, and for missing fields put a dash):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\nFinal Bid: $21,000, Fees: $1550\n\nüöô\nMileage: 27 587 mi (44 397 km)\n2.9L, 6 cyl., 375HP, AT\nGasoline, All wheel drive\nPrimary damage: Front end\nSecondary damage: ‚Äì\nStart code: Run and Drive\nKey: Present\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, sold on 3 June, 2025\nSeller: State Farm Insurance\nSales History: 1\nSale doc: Salvage certificate (IL)\nLocation: Long Island (NY)  \nPort: Newark (NJ)  \nLoss: ‚Äì'
                : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∞—É–∫—Ü–∏–æ–Ω–∞ bid.cars (–Ω–æ –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç, –∏–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞–¥–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –∏–ª–∏ "nothing was found" —Ç–æ —Ç–∞–∫ –∏ –ø–∏—à–∏ - "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"). –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ (–ø—Ä–æ–±–µ–≥, —Å—É–º–º—ã —Ç–æ—Ä–≥–æ–≤, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, VIN, –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã, –∞—É–∫—Ü–∏–æ–Ω, –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–∞–π—Ç–ª, —Ç–∏–ø –ø–æ—Ç–µ—Ä–∏, –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫, –∫–ª—é—á, ACV, ERC, –¥–≤–∏–≥–∞—Ç–µ–ª—å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂) –∏ –≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\n–°—Ç–∞–≤–∫–∞ $21,000, —Å–±–æ—Ä—ã $1550\n\nüöô\n–ü—Ä–æ–±–µ–≥: 27 587 –º–∏–ª—å (44 397 –∫–º)\n2.9L, 6 cyl., 375HP, AT\n–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π, –ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥\n–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å\n–î–æ–ø. –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: ‚Äì\n–ó–∞–ø—É—Å–∫: –ù–∞ —Ö–æ–¥—É\n–ö–ª—é—á: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, –ø—Ä–æ–¥–∞–Ω 3 –∏—é–Ω—è, 2025\n–ü—Ä–æ–¥–∞–≤–µ—Ü: State Farm Insurance\n–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂: 1 \n–¢–∞–π—Ç–ª: Salvage certificate (IL)\n–õ–æ–∫–∞—Ü–∏—è: Long Island (NY)  \n–ü–æ—Ä—Ç: Newark (NJ)  \n–¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è: ‚Äì');

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ OpenAI...');
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userContent }
            ],
            max_tokens: 1024,
        }, { signal: controller.signal });

        const content = response.choices[0].message.content.trim();
        if (content.toLowerCase() === 'error' || content.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
            console.log('OpenAI –≤–µ—Ä–Ω—É–ª "error" –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ".');
            return null;
        }
        return content;

    } catch (error) {
        if (error.name === 'AbortError') {
            console.error('‚ùå –û—à–∏–±–∫–∞ GPT: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ GPT:', error.message);
        }
        return null;
    } finally {
        clearTimeout(timeoutId);
    }
}

async function analyzeScreenshotWithGPT(imagePath, isVin = false, textPrompt = null, lang = 'ru') {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => {
      console.log('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –ø–æ —Ç–∞–π–º–∞—É—Ç—É...');
      controller.abort();
  }, 90000);

  try {
    if (imagePath === null && textPrompt) {
      // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      const systemPrompt = isVin
        ? (lang === 'en'
            ? 'You are an OCR interpreter. The image may contain a VIN code. Try to recognize the VIN code, even if it is partially readable or contains errors. If you cannot see the VIN, write "VIN not recognized". If you managed to find the VIN, reply with only the VIN code. If you could not recognize it, reply: "error".'
            : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂—ë–Ω VIN-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —á–∏—Ç–∞–µ–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ VIN –Ω–µ –≤–∏–¥–Ω–æ, –Ω–∞–ø–∏—à–∏ "VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω". –ï—Å–ª–∏ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º vin –∫–æ–¥. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —É–¥–∞–ª–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç : "error" ')
        : (lang === 'en'
            ? 'You are an OCR interpreter. The image should contain a car auction card from bid.cars (but if it is not there, or you see inscriptions like "not found" or "nothing was found", just reply: "not found"). Extract the lot data (mileage, bid amounts, make, model, year, VIN, lot number, final bid, auction fees, auction, sale date, seller, sale doc, loss, primary and secondary damage, start code, key, ACV, ERC, engine, location, port, sales history) and return in the following format (if some data is missing, that is fine, just write all available data, and for missing fields put a dash):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\nFinal Bid: $21,000, Fees: $1550\n\nüöô\nMileage: 27 587 mi (44 397 km)\n2.9L, 6 cyl., 375HP, AT\nGasoline, All wheel drive\nPrimary damage: Front end\nSecondary damage: ‚Äì\nStart code: Run and Drive\nKey: Present\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, sold on 3 June, 2025\nSeller: State Farm Insurance\nSales History: 1\nSale doc: Salvage certificate (IL)\nLocation: Long Island (NY)  \nPort: Newark (NJ)  \nLoss: ‚Äì'
            : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∞—É–∫—Ü–∏–æ–Ω–∞ bid.cars (–Ω–æ –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç, –∏–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞–¥–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –∏–ª–∏ "nothing was found" —Ç–æ —Ç–∞–∫ –∏ –ø–∏—à–∏ - "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"). –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ (–ø—Ä–æ–±–µ–≥, —Å—É–º–º—ã —Ç–æ—Ä–≥–æ–≤, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, VIN, –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã, –∞—É–∫—Ü–∏–æ–Ω, –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–∞–π—Ç–ª, —Ç–∏–ø –ø–æ—Ç–µ—Ä–∏, –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫, –∫–ª—é—á, ACV, ERC, –¥–≤–∏–≥–∞—Ç–µ–ª—å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂) –∏ –≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\n–°—Ç–∞–≤–∫–∞ $21,000, —Å–±–æ—Ä—ã $1550\n\nüöô\n–ü—Ä–æ–±–µ–≥: 27 587 –º–∏–ª—å (44 397 –∫–º)\n2.9L, 6 cyl., 375HP, AT\n–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π, –ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥\n–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å\n–î–æ–ø. –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: ‚Äì\n–ó–∞–ø—É—Å–∫: –ù–∞ —Ö–æ–¥—É\n–ö–ª—é—á: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, –ø—Ä–æ–¥–∞–Ω 3 –∏—é–Ω—è, 2025\n–ü—Ä–æ–¥–∞–≤–µ—Ü: State Farm Insurance\n–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂: 1 \n–¢–∞–π—Ç–ª: Salvage certificate (IL)\n–õ–æ–∫–∞—Ü–∏—è: Long Island (NY)  \n–ü–æ—Ä—Ç: Newark (NJ)  \n–¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è: ‚Äì');
      const response = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: textPrompt }
        ],
        max_tokens: isVin ? 200 : 800
      }, { signal: controller.signal });
      const content = response.choices[0].message.content.trim();
      if (content.toLowerCase() === 'error') {
          console.log('OpenAI –≤–µ—Ä–Ω—É–ª "error". –°—á–∏—Ç–∞–µ–º, —á—Ç–æ VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.');
          return null;
      }
      return content;
    }
    console.log('–ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è GPT...');
    const buffer = fs.readFileSync(imagePath);
    const base64Image = buffer.toString('base64');
    const mimeType = mime.lookup(imagePath);

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ OpenAI...');
    const systemPrompt = isVin
        ? (lang === 'en'
            ? 'You are an OCR interpreter. The image may contain a VIN code. Try to recognize the VIN code, even if it is partially readable or contains errors. If you cannot see the VIN, write "VIN not recognized". If you managed to find the VIN, reply with only the VIN code. If you could not recognize it, reply: "error".'
            : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂—ë–Ω VIN-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —á–∏—Ç–∞–µ–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ VIN –Ω–µ –≤–∏–¥–Ω–æ, –Ω–∞–ø–∏—à–∏ "VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω". –ï—Å–ª–∏ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º vin –∫–æ–¥. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —É–¥–∞–ª–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç : "error" ')
        : (lang === 'en'
            ? 'You are an OCR interpreter. The image should contain a car auction card from bid.cars (but if it is not there, or you see inscriptions like "not found" or "nothing was found", just reply: "not found"). Extract the lot data (mileage, bid amounts, make, model, year, VIN, lot number, final bid, auction fees, auction, sale date, seller, sale doc, loss, primary and secondary damage, start code, key, ACV, ERC, engine, location, port, sales history) and return in the following format (if some data is missing, that is fine, just write all available data, and for missing fields put a dash):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\nFinal Bid: $21,000, Fees: $1550\n\nüöô\nMileage: 27 587 mi (44 397 km)\n2.9L, 6 cyl., 375HP, AT\nGasoline, All wheel drive\nPrimary damage: Front end\nSecondary damage: ‚Äì\nStart code: Run and Drive\nKey: Present\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, sold on 3 June, 2025\nSeller: State Farm Insurance\nSales History: 1\nSale doc: Salvage certificate (IL)\nLocation: Long Island (NY)  \nPort: Newark (NJ)  \nLoss: ‚Äì'
            : '–¢—ã OCR-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∞—É–∫—Ü–∏–æ–Ω–∞ bid.cars (–Ω–æ –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç, –∏–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞–¥–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –∏–ª–∏ "nothing was found" —Ç–æ —Ç–∞–∫ –∏ –ø–∏—à–∏ - "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"). –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ (–ø—Ä–æ–±–µ–≥, —Å—É–º–º—ã —Ç–æ—Ä–≥–æ–≤, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, VIN, –Ω–æ–º–µ—Ä –ª–æ—Ç–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã, –∞—É–∫—Ü–∏–æ–Ω, –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–∞–π—Ç–ª, —Ç–∏–ø –ø–æ—Ç–µ—Ä–∏, –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫, –∫–ª—é—á, ACV, ERC, –¥–≤–∏–≥–∞—Ç–µ–ª—å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂) –∏ –≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫):\n2023 PORSCHE MACAN, S\nWP1AG2A55PLB35553\n–°—Ç–∞–≤–∫–∞ $21,000, —Å–±–æ—Ä—ã $1550\n\nüöô\n–ü—Ä–æ–±–µ–≥: 27 587 –º–∏–ª—å (44 397 –∫–º)\n2.9L, 6 cyl., 375HP, AT\n–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π, –ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥\n–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å\n–î–æ–ø. –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: ‚Äì\n–ó–∞–ø—É—Å–∫: –ù–∞ —Ö–æ–¥—É\n–ö–ª—é—á: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π\nACV $67,661 / ERC $51,853\n\nüìÑ\n1-55955125\nCopart, –ø—Ä–æ–¥–∞–Ω 3 –∏—é–Ω—è, 2025\n–ü—Ä–æ–¥–∞–≤–µ—Ü: State Farm Insurance\n–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂: 1 \n–¢–∞–π—Ç–ª: Salvage certificate (IL)\n–õ–æ–∫–∞—Ü–∏—è: Long Island (NY)  \n–ü–æ—Ä—Ç: Newark (NJ)  \n–¢–∏–ø —Å–ø–∏—Å–∞–Ω–∏—è: ‚Äì');

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        {
          role: 'user',
          content: [
            {
              type: 'image_url',
              image_url: { url: `data:${mimeType};base64,${base64Image}` }
            }
          ]
        }
      ],
      max_tokens: isVin ? 200 : 800
    }, { signal: controller.signal });

    const content = response.choices[0].message.content.trim();
    if (content.toLowerCase() === 'error') {
        console.log('OpenAI –≤–µ—Ä–Ω—É–ª "error". –°—á–∏—Ç–∞–µ–º, —á—Ç–æ VIN –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.');
        return null;
    }
    return content;
  } catch (error) {
    if (error.name === 'AbortError') {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.');
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT:', error.message);
    }
    return null;
  } finally {
      clearTimeout(timeoutId);
  }
}

async function translateTextWithGPT(text, targetLang = 'en') {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000);
    try {
        const prompt = targetLang === 'en'
            ? 'Translate the following text to English. Only return the translation, without any comments or explanations.'
            : '–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.';
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: prompt },
                { role: 'user', content: text }
            ],
            max_tokens: 1024
        }, { signal: controller.signal });
        return response.choices[0].message.content.trim();
    } catch (error) {
        return text;
    } finally {
        clearTimeout(timeoutId);
    }
}

module.exports = { analyzeScreenshotWithGPT, analyzeScreenshotsWithGPT, translateTextWithGPT }; 